<?php

namespace Salim\PlateformeBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends EntityRepository
{
//QUERYBUILDER
	public function myFindAll()
	{
		//SELECT * FROM Advert;
		return $this 
		-> createQueryBuilder('a')
		-> getQuery()
		-> getResult()
		;
	}
	

	public function myFindOne($id)
	{
		//SELECT * FROM Advert WHERE 'id'=$id;
		return $this 
		-> createQueryBuilder('a')
		-> where('a.id = :id')
		-> setParameter ('id', $id)
		-> getQuery()
		-> getResult()
		;
	}


	public function findByAuthorAndDate ($author,$date)
	{
		//SELECT * FROM Advert WHERE 'author'=$author 
		//AND 'date' < $date ORDER BY 'date' DESC;
		return $this 
		-> createQueryBuilder('a')
		-> where ('a.author = :author')
		-> setParameter ('author', $author)
		-> andWhere ('a.date < :date')
		-> setParameter ('date',$date)
		-> orderBy('a.date','DESC')
		-> getQuery()
		-> getResult()
		;
	}


	public function whereCurrentYear (QueryBuilder $qb)
	{
		//Ajout de la condition à la requète $qb
		//"WHERE 'date' BETWEEN 2017-01-01 AND 2017-12-31";
		$qb
		-> andWhere('a.date BETWEEN :debut AND :fin')
		//Entre le 1er janvier de cette année
		-> setParameter('debut', new \Datetime( date('Y').'-01-01' ))
		//Et le 31 décembre de cette année
		-> setParameter('fin', new \Datetime( date('Y').'-12-31' ))
		;
	}

//DQL
	public function findAllDQL()
	{
		//SELECT * FROM Advert;
		return $this
		-> _em
		-> createQuery("
			SELECT a 
			FROM SalimPlateformeBundle:Advert a
			")
		-> getResult()
		;
	}

	public function myFindDQL($id)
	{
		//SELECT * FROM Advert WHERE 'id' = $id;
		return $this
		-> _em
		-> createQuery("
			SELECT a 
			FROM SalimPlateformeBundle:Advert a 
			WHERE a.id = :id
			")
		-> setParameter('id', $id)
		-> getSingleResult()
		;
	}

	//JOINTURES
	public function getAdverts($page, $nbParPage)
	{
		// SELECT * FROM Advert JOIN Image JOIN Category
		// ORDER BY 'date' DESC
		$query = $this
		-> createQueryBuilder('a')
		-> leftJoin('a.image', 'i')
		-> addSelect('i')
		-> leftJoin('a.categories', 'c')
		-> addSelect('c')
		-> getQuery()
		// On définit l'annonce à partir de laquelle commencer la liste
		-> setFirstResult(($page-1) * $nbParPage)
      	// Ainsi que le nombre d'annonce à afficher sur une page
		-> setMaxResults($nbParPage);

		return new Paginator($query, true);
	}


	public function getAdvertWithApplications()
	{
		//SELECT * FROM Advert NATURAL JOIN Application AS app
		return $this
		-> createQueryBuilder('a') 
		-> leftJoin('a.applications','app')
		-> addSelect('app')
		-> getQuery()
		-> getResult()
		;
	}

//PLATEFORME
	public function getAdvertWithCategories (array $categoryNames)
	{

		return $this 
		-> createQueryBuilder('a')
		-> innerJoin('a.categories','cat')
		-> addSelect('cat')
		-> where( $expr() -> in('cat.name', $categoryNames))
		//expr() aide a traduire l'expression en DQL
		//where($qb->expr()->in('cat.name',$categoryNames)) ===
		//WHERE 'cat.name' IN $categoryNames
		-> getQuery()
		-> getResult()
		;
	}


}
